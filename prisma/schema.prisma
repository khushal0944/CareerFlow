// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())
    clerkUserId String @unique
    name String
    email String @unique
    imageUrl String?
    industry String? 
    industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
    bio String?
    experience Int?
    skills String[]
    assessments Assessment[]
    coverLetter CoverLetter[]
    resume Resume[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model IndustryInsight {
    id String @id @default(uuid())
    industry String @unique
    users User[]
    salaryRanges Json[]
    growthRate Float
    topSkills String[]
    demandLevel DemandLevel
    marketOutlook MarketOutlook
    keyTrends String[]
    recommendedSkills String[]
    lastUpdated DateTime @default(now())
    nextUpdated DateTime

    @@index([industry])
}

enum DemandLevel {
    HIGH
    MEDIUM
    LOW
}

enum MarketOutlook {
    POSITIVE
    NEUTRAL
    NEGATIVE
}

model Assessment {
    id String @id @default(uuid())
    userId String
    user User @relation(fields: [userId], references: [id])
    quizScore Float
    questions Json[]
    category String
    improvementTip String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model CoverLetter {
    id String @id @default(uuid())
    userId String 
    user User @relation(fields: [userId], references: [id])
    content String
    jobDescription String?
    companyName String
    jobTitle String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Resume {
    id String @id @default(uuid())
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    content String @db.Text
    atsScore Float?
    feedback String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}